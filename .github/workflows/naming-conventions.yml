name: Naming Conventions Check

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.cpp'
      - '**/*.h'

jobs:
  naming-conventions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the full history is fetched

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Find modified, new, and PR files
        id: find_files
        run: |
          # Check for modified files in the pull request (if it's a PR)
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            pr_files=$(git diff --name-only origin/main...HEAD -- '*.cpp' '*.h')
          else
            pr_files=""
          fi
          # Combine all files (modified, new, and PR files)
          all_files=$(echo -e "$pr_files" | sort -u | tr '\n' ' ')
          echo "FILES=$all_files" >> $GITHUB_ENV
          echo "Checking files: $all_files"

      - name: Check Naming Conventions
        run: |
          if [ -n "$FILES" ]; then
            echo "Checking for naming convention violations..."

            naming_errors=()

            for file in $FILES; do
              if [[ $file == *.cpp || $file == *.h ]]; then
                # Check class names (should start with an uppercase letter and be a noun)
                grep -E -n 'class [a-z]' "$file" && naming_errors+=("Class names in $file should start with an uppercase letter")

                # Check variable names (should be camelCase and start with a lowercase letter)
                grep -E -n '\b[A-Za-z][a-zA-Z0-9_]*\b' "$file" | while read -r line; do
                  var_name=$(echo $line | awk '{print $2}')
                  if [[ ! "$var_name" =~ ^[a-z][a-zA-Z0-9]*$ && ! "$var_name" =~ ^[A-Z] ]]; then
                    naming_errors+=("Variable '$var_name' in $file does not follow camelCase or start with an uppercase letter.")
                  fi
                done

                # Check function names (should be camelCase and start with a lowercase letter)
                grep -E -n 'void [A-Z]' "$file" && naming_errors+=("Function names in $file should start with a lowercase letter and be in camelCase.")

                # Check enum declarations (should be camel case with 'Kind' suffix for discriminators)
                grep -E -n 'enum [A-Z]' "$file" && naming_errors+=("Enum declarations in $file should start with an uppercase letter and follow the type naming convention.")

                # Check enum values for 'Kind' suffix
                grep -E -n 'enum' "$file" | while read -r line; do
                  enum_name=$(echo $line | awk '{print $2}')
                  if [[ "$enum_name" =~ .*Kind$ ]]; then
                    naming_errors+=("Enum '$enum_name' in $file should have the 'Kind' suffix when used as a discriminator.")
                  fi
                done
              fi
            done

            if [ ${#naming_errors[@]} -gt 0 ]; then
              echo "The following naming convention violations were found:"
              for error in "${naming_errors[@]}"; do
                echo "  $error"
              done
              exit 1
            else
              echo "All naming conventions are followed."
            fi
          else
            echo "No relevant files to check for naming conventions."
          fi

      - name: Report mistakes and failures
        run: |
          if [ -n "$FILES" ]; then
            echo "Naming Conventions Check complete. Check for any violations above."
          else
            echo "No files to check."
          fi

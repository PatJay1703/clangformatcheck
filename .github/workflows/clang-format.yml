name: Clang Format Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Find modified, new, and PR files
        id: find_files
        run: |
          # Check if there is a previous commit
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "Found previous commit, checking modified files..."
            # Get the list of modified files from the last commit (already committed but changed)
            modified_files=$(git diff --name-only HEAD~1 -- '*.cpp' '*.h')
            echo "Modified files: $modified_files"
          else
            echo "No previous commit found, skipping modified files check."
            modified_files=""
          fi
          
          # Get new files (newly added but not yet committed)
          new_files=$(git ls-files --others --exclude-standard '*.cpp' '*.h')
          echo "New files: $new_files"
          
          # Get files modified in the pull request (if it is a PR event)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            pr_files=$(git diff --name-only origin/main...HEAD -- '*.cpp' '*.h')
            echo "PR files: $pr_files"
          else
            pr_files=""
          fi
          
          # Combine all relevant files: modified, new, and PR files
          all_files=$(echo -e "$modified_files\n$new_files\n$pr_files" | sort -u | tr '\n' ' ')
          echo "All relevant files: $all_files"

          # Export the list of files to the environment variable
          echo "FILES=$all_files" >> $GITHUB_ENV

          # Print the files being checked
          echo "Checking files: $all_files"

      - name: Run clang-format and show differences
        run: |
          if [ -n "$FILES" ]; then
            # Format the relevant files
            clang-format -i $FILES
            # Check if there are differences
            if ! git diff --quiet; then
              echo "Code not formatted correctly. Showing diff:"
              git diff --color
              exit 1
            fi
          else
            echo "No relevant files to check."
          fi

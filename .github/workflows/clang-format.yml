name: Clang Format Check

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.cc'
      - '**/*.cxx'
      - '**/*.java'
      - '**/*.js'
      - '**/*.json'
      - '**/*.m'
      - '**/*.h'
      - '**/*.proto'
      - '**/*.cs'

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the full history is fetched

      - name: Fetch LLVM repository for formatting scripts
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: main
          path: llvm-repo

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r llvm-repo/llvm/utils/git/requirements_formatting.txt

      - name: Find modified, new, and PR files
        id: find_files
        run: |
          # Check for modified files in the pull request (if it's a PR)
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            pr_files=$(git diff --name-only origin/main...HEAD -- '*.cpp' '*.h' '*.c' '*.cc' '*.cxx' \
                    '*.proto' '*.cs' '*.m' '*.java' '*.js' '*.json')
          else
            pr_files=""
          fi
          # Combine all files (modified, new, and PR files)
          all_files=$(echo -e "$files\n$pr_files" | sort -u | tr '\n' ' ')
          
          echo "FILES=$all_files" >> $GITHUB_ENV
          echo "Checking files: $all_files"

      - name: Run Python code formatter
        run: |
          if [ -n "$FILES" ]; then
            # Run the Python script for formatting (assuming it's in llvm-repo directory)
            python3 llvm-repo/llvm/utils/git/code-format-helper.py \
              --start-rev $(git merge-base origin/main HEAD) \
              --end-rev HEAD \
              --changed-files "$FILES"
            if ! git diff --quiet; then
              echo "Code not formatted correctly. Showing diff:"
              git diff --color
              exit 1
            fi
          else
            echo "No relevant files to check."
          fi

      - name: Commit changes if any
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git commit -am "Apply code formatting" || echo "No changes to commit"
          git push

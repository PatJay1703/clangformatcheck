name: Clang Format Check

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.cc'
      - '**/*.cxx'
      - '**/*.java'
      - '**/*.js'
      - '**/*.json'
      - '**/*.m'
      - '**/*.h'
      - '**/*.proto'
      - '**/*.cs'

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the full history is fetched

      - name: Fetch latest changes from remote
        run: git fetch origin

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Find modified files and changed lines
        id: find_files
        run: |
          # Fetch the list of files modified in the pull request
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            pr_files=$(git diff --name-only origin/main...HEAD -- '*.cpp' '*.h' '*.c' '*.cc' '*.cxx' \
                    '*.proto' '*.cs' '*.m' '*.java' '*.js' '*.json')
          else
            pr_files=""
          fi

          # Create a variable to store the list of changed lines
          changed_files=""

          for file in $pr_files; do
            # Get modified lines for each file
            modified_lines=$(git diff -U0 origin/main...HEAD -- "$file" | grep '^\+' | grep -v '^\+\+\+' | cut -c2-)
            if [ -n "$modified_lines" ]; then
              changed_files="$changed_files $file"
            fi
          done

          echo "FILES=$changed_files" >> $GITHUB_ENV
          echo "Checking files: $changed_files"

      - name: Apply clang-format to changed lines
        run: |
          if [ -n "$FILES" ]; then
            for file in $FILES; do
              # Get the modified lines in the file
              lines=$(git diff -U0 origin/main...HEAD -- "$file" | grep '^\+' | grep -v '^\+\+\+' | cut -c2-)
              
              # Create a temporary file and add the modified lines
              echo "$lines" > tmp_$file

              # Apply clang-format to the temporary file
              clang-format -i tmp_$file

              # Check if the diff of the formatted temp file is different from the original
              if ! diff tmp_$file "$file" > /dev/null; then
                echo "Code not formatted correctly in $file. Showing diff:"
                diff tmp_$file "$file"
                exit 1
              fi

              # Clean up temporary files
              rm tmp_$file
            done
          else
            echo "No relevant files to check."
          fi

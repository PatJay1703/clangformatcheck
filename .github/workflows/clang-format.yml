name: Clang Format Check

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/clang-format.yml'
      - '.github/workflows/clang-tidy-check.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/clang-format.yml'
      - '.github/workflows/clang-tidy-check.yml'

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the full history is fetched

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Create list of files to exclude
        id: create_exclusions
        run: |
          # Read the exclusion patterns from the .clang-format-ignore file and join them using '|'
          exclusions=$(cat .clang-format-ignore | tr '\n' '|' | sed 's/|$//')
          echo "Exclusions: $exclusions"
          echo "EXCLUSIONS=$exclusions" >> $GITHUB_ENV

      - name: Find modified, new, and PR files
        id: find_files
        run: |
          # Find all modified files in the last commit (HEAD~1)
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "Commit found"
            commit_files=$(git diff --name-only HEAD~1 -- '*.cpp' '*.h' '*.c' '*.cc' '*.cxx' \
              '*.hpp' '*.hxx' '*.f' '*.f90' '*.s' '*.S' '*.cu' '*.cuf' '*.cl' \
              '*.proto' '*.hlsl' '*.asm' '*.py' '*.ts' '*.tsx' '*.css' '*.scss' \
              '*.lua')

            echo "Modified files:"
            echo "$commit_files"
          fi

          # Find all newly added files (uncommitted)
          new_files=$(git ls-files --others --exclude-standard -- '*.cpp' '*.h' '*.c' '*.cc' '*.cxx' \
              '*.hpp' '*.hxx' '*.f' '*.f90' '*.s' '*.S' '*.cu' '*.cuf' '*.cl' \
              '*.proto' '*.hlsl' '*.asm' '*.py' '*.ts' '*.tsx' '*.css' '*.scss' \
              '*.lua')

          echo "Newly added files:"
          echo "$new_files"

          # Check modified files in the pull request (if it's a PR)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            pr_files=$(git diff --name-only origin/main...HEAD -- '*.cpp' '*.h' '*.c' '*.cc' '*.cxx' \
              '*.hpp' '*.hxx' '*.f' '*.f90' '*.s' '*.S' '*.cu' '*.cuf' '*.cl' \
              '*.proto' '*.hlsl' '*.asm' '*.py' '*.ts' '*.tsx' '*.css' '*.scss' \
              '*.lua')

            echo "PR files:"
            echo "$pr_files"
          fi

          # Combine modified, new, and PR files
          all_files=$(echo -e "$commit_files\n$new_files\n$pr_files" | sort -u)

          echo "FILES=$all_files" >> $GITHUB_ENV
          echo "Checking files: $all_files"

      - name: Run clang-format and show differences
        run: |
          if [ -n "$FILES" ]; then
            # Ensure files are properly formatted before passing to clang-format
            echo "$FILES" | tr '\n' ' ' | xargs clang-format -i

            # Check if any file has changes after formatting
            if ! git diff --quiet; then
              echo "Code not formatted correctly. Showing diff:"
              git diff --color
              exit 1
            fi
          else
            echo "No relevant files to check."
          fi

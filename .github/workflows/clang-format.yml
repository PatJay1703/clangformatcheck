name: Clang Format Check

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.cc'
      - '**/*.cxx'
      - '**/*.java'
      - '**/*.js'
      - '**/*.json'
      - '**/*.m'
      - '**/*.h'
      - '**/*.proto'
      - '**/*.cs'

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures the full history is fetched

      - name: Fetch latest changes from remote
        run: git fetch origin

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Find modified, new, and PR files
        id: find_files
        run: |
          # Check for modified files in the pull request (if it's a PR)
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            pr_files=$(git diff --name-only origin/main...HEAD -- '*.cpp' '*.h' '*.c' '*.cc' '*.cxx' \
                      '*.proto' '*.cs' '*.m' '*.java' '*.js' '*.json')
          else
            pr_files=""
          fi
          # Combine all files (modified, new, and PR files)
          all_files=$(echo -e "$pr_files" | sort -u | tr '\n' ' ')

          echo "FILES=$all_files" >> $GITHUB_ENV
          echo "Checking files: $all_files"

      - name: Identify modified lines
        id: modified_lines
        run: |
          if [ -n "$FILES" ]; then
            # Create an empty file to store modified line numbers
            > modified_lines.txt
            for file in $FILES; do
              echo "Checking file: $file"

              # Extract line numbers from the git diff output and store in modified_lines.txt
              git diff --unified=0 origin/main...HEAD -- $file | \
                grep -E "^\+|^\-" | \
                sed -n 's/^\([0-9]*\).*$/\1/p' >> modified_lines.txt
            done
            echo "Modified line numbers saved in modified_lines.txt"
            cat modified_lines.txt
          else
            echo "No relevant files to check."
          fi

      - name: Apply clang-format to modified lines and show differences
        run: |
         if [ -n "$FILES" ]; then
            for file in $FILES; do
              echo "Running clang-format on modified lines of $file"
        
              # Apply clang-format only on the modified lines
              if [ -f modified_lines.txt ]; then
                while IFS= read -r line_number; do
                  if [[ "$line_number" =~ ^[0-9]+$ ]]; then  # Ensure it's a valid number
                    # Apply clang-format to the modified line using the range format: line_number:line_number
                    echo "Applying clang-format to line $line_number in $file"
                    clang-format -i -lines=$line_number:$line_number $file
                  else
                    echo "Skipping invalid line number: $line_number"
                  fi
                done < modified_lines.txt
              fi

              # Compare with git diff to check if formatting has been applied correctly
              if ! git diff --quiet; then
                echo "Code not formatted correctly in $file. Showing diff:"
                git diff --color $file
                exit 1
              fi
            done
          else
            echo "No relevant files to check."
          fi
